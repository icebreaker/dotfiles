" Custom make wrapper which can search for a valid Makefile.
set makeprg=make.sh
set errorformat^=%-GIn\ file\ included\ %.%#
" Bind Ctrl+B to make
map <c-b> <ESC>:make build<CR>
" Bind Ctrl+R to execute
map <c-r> <ESC>:make execute<CR>
" Bind Ctrl+Q to clean
map <c-k> <ESC>:make clean<CR>
" Bind Ctrl+G to generate
map <c-g> <ESC>:make generate<CR>
" Toggle Spell checking
map <F4> :set spell! spelllang=en_us<CR>
" Toggle Line Numbers
map <F2> :set nonumber!<CR>
" Send to Twitter (will prompt)
map <F12> :PosttoTwitter<CR>

" Copy Paste with Ctrl+C and Ctrl+V
vmap <c-c> :w! ~/.vim/swap/.buffer<CR>
nmap <c-p> :r ~/.vim/swap/.buffer<CR>

" Next / Prev File (as in :args)
:noremap <c-n> :n<CR>
:noremap <c-m> :prev<CR>

" Highlight Last Searched Term
:noremap <space> :set hlsearch!<CR>

set nospell
set encoding=utf8
set fileencoding=utf8
set selectmode=key
set nowrap
set complete-=i
set wildmenu
set fileformats=unix,mac,dos
set nocp
set keymodel=startsel
set laststatus=2
set novisualbell
set number
set report=0
set nolazyredraw
set ttyfast
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$ 
set autoindent
set cindent
set smartindent
set smartcase
set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set cursorline
set smarttab
set showmatch
set nohlsearch
set incsearch
set nocompatible
set backspace=indent,eol,start
set diffopt+=iwhite
set hidden
set nostartofline
set shortmess=asI
set showcmd
set ignorecase
"set mouse=a
set columns=80
set ruler
set undolevels=500
set history=1000
set nofsync
set clipboard+=unnamed
set cinoptions+=g0

let python_highlight_all=1

syntax on
syntax sync fromstart
filetype on
filetype plugin on
filetype plugin indent on
filetype indent on

set t_AB=^[[48;5;%dm
set t_AF=^[[38;5;%dm
set t_Co=256
"set term=gnome-256color
set term=xterm-256color

if has("gui_running")
	set guifont=Meslo\ LG\ M\ for\ Powerline\ 11
endif

set completeopt=menu,menuone
set pumheight=10

let g:clang_use_library=1
let g:clang_library_path='/usr/lib64/'
"let g:clang_snippets=1

let g:Powerline_symbols = 'fancy'
let g:Powerline_mode_v	= 'V'
let g:Powerline_mode_V	= 'V⋅L'
let g:Powerline_mode_cv = 'V⋅B'
let g:Powerline_mode_s	= 'S'
let g:Powerline_mode_S	= 'S⋅L'
let g:Powerline_mode_cs = 'S⋅B'
let g:Powerline_mode_i	= 'I'
let g:Powerline_mode_R	= 'R'
let g:Powerline_mode_n	= 'N'
	
let g:solarized_italic=0
let g:solarized_termcolors=256
"let g:solarized_termtrans = 1

"colorscheme 256-jungle
"colorscheme wombat
"colorscheme railscasts
"colorscheme solarized
"colorscheme sorcerer
"colorscheme obsidian
"colorscheme github
"colorscheme Tomorrow
"colorscheme jellybeans
"colorscheme neverland2
"colorscheme desertEx
"colorscheme molokai
"colorscheme mars
"colorscheme hemisu
"colorscheme sahara
colorscheme gummybears
"colorscheme hornet
"colorscheme lucius
"colorscheme kolor

if exists("g:colors_name") && g:colors_name == "gummybears"
	hi Normal ctermbg=none
	hi NonText ctermbg=none
	hi Search cterm=none ctermfg=1 ctermbg=172
	hi Todo ctermbg=none ctermfg=107
endif

" Word Completion
function! Tab_Or_Complete()
	if col('.')>1 && strpart(getline('.'), col('.')-2, 3) =~ '^\w'
		return "\<C-N>"
	else
		return "\<Tab>"
	endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>

" File Types
au! BufRead,BufNewFile *.json set filetype=json
au! BufRead,BufNewFile *.as set filetype=actionscript
au! BufRead,BufNewFile Rakefile,Gemfile set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.ru set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.rb set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile .irbrc set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.erb set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.haml set filetype=haml tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.sass set filetype=sass tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.yml,*.yaml,Doxterfile set filetype=yaml tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.rake,*.gemspec,*.js set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.install set filetype=php
au! BufRead,BufNewFile *.inc set filetype=php
au! BufRead,BufNewFile *.php set filetype=php
au! BufRead,BufNewFile *.rst set tabstop=3 shiftwidth=3 softtabstop=3 expandtab
au! BufRead,BufNewFile *.me,*.symlink,*.bsh,*.localrc call SetFileTypeSH("bash")
au! BufRead,BufNewFile *.py set filetype=python
au! BufRead,BufNewFile Cakefile set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.coffee set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.lua set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.hx set filetype=haxe tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.md,*.markdown,*.mkd call DistractionFreeWriting()
au! BufRead,BufNewFile *.c,*.h,*.cpp,*.hpp,*.cxx,*.hxx,*.cc,*.hh call FoldLicense()
au! BufRead,BufNewFile * set formatoptions=tcq

" Credit: http://gslsrc.net/l02_license_folding.html
function! FoldLicense()
	let s:line = getline(1)
	if s:line == "/*"
		let s:savepos = getpos(".")
		call cursor(1, 1)
		execute "normal" "zf]*"
		call setpos(".", s:savepos)
	endif
endfunction

function! DistractionFreeWriting()
	set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
	set columns=100
	set laststatus=0
	set noruler
	set linebreak
	set nonumber
	set foldcolumn=12
	set tw=79
	hi FoldColumn ctermbg=none
	hi clear SpellBad
	hi SpellBad term=standout ctermfg=1 term=none cterm=none
	hi clear SpellCap
	hi SpellCap term=standout ctermfg=2 term=none cterm=none
	hi clear SpellLocal
	hi SpellLocal term=standout ctermfg=3 term=none cterm=none
	hi clear SpellRare
	hi SpellRare term=standout ctermfg=4 term=none cterm=none
endfunction

" Swap Directory
set directory=~/.vim/swap

" Restore / Jump to last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
