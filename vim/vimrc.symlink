" options
set nospell
set encoding=utf8
set fileencoding=utf8
set selectmode=key
set nowrap
set complete-=i
set fileformats=unix,mac,dos
set nocp
set keymodel=startsel
set novisualbell
set number
set report=0
set nolazyredraw
set ttyfast
set autoindent
set cindent
set smartindent
set smartcase
set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set cursorline
set smarttab
set showmatch
set nohlsearch
set incsearch
set nocompatible
set backspace=indent,eol,start
set diffopt+=iwhite
set hidden
set nostartofline
set shortmess=atsI
set noshowcmd
set ignorecase
set mouse-=a
set ruler
set nofsync
set clipboard=exclude:.*
set cinoptions+=g0
set foldmethod=marker
set cryptmethod=blowfish2

" netrw
let g:netrw_banner=0
let g:netrw_fastbrowse=1

" swap and undo
set history=1000
set undodir=~/.vimundo
set undolevels=1000
set undofile
set directory=~/.vimswap

" quality of life
set pastetoggle=<F3>
nnoremap <F2> :set nonumber!<CR>
nnoremap <F4> :set spell! spelllang=en_us<CR>
nnoremap <F5> :set hlsearch!<CR>

vnoremap <C-c> :w! ~/.vimswap/.buffer<CR>
nnoremap <C-p> :r ~/.vimswap/.buffer<CR>

nnoremap r :redo<CR>
nnoremap ; :

nnoremap <Leader>w :w<CR>
nnoremap <Leader>= <C-a>
nnoremap <Leader>- <C-x>

nnoremap zz ZZ
nnoremap zq ZQ

nnoremap q <nop>

noremap b <C-b>
noremap f <C-f>

augroup qol
	au!
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exec "normal! g'\"" | endif
	au BufWritePre * silent exec '%s/\s\+$//e'
augroup end

" syntax and colorscheme
set t_AB=^[[48;5;%dm
set t_AF=^[[38;5;%dm
set t_Co=256
set term=xterm-256color

if $TMUX =~ 'tmux'
	set term=xterm-256color
	nmap  <Home>
	imap  <Home>
	vmap  <Home>
	nmap  <End>
	imap  <End>
	vmap  <End>
endif

let c_no_curly_error=1
let python_highlight_all=1
let coffee_no_reserved_words_error=1
let g:delimitMate_expand_cr=1

syntax on
syntax sync fromstart
filetype on
filetype plugin on
filetype plugin indent on
filetype indent on

if has('gui_running')
	set guifont=JetBrains\ Mono\ SemiBold\ 19
	set guicursor+=a:blinkon0
	set guioptions=i
endif

let g:html_font='JetBrains Mono SemiBold'

set background=dark

if has('gui_running')
	colorscheme borland
else
	colorscheme monoplex
endif

" color column and basic distraction free writing for markdown
hi ColorColumn ctermbg=124 ctermfg=NONE cterm=BOLD
call matchadd('ColorColumn', '\%120v', 100)

augroup dfw
	au!
	au FileType markdown set nonumber wrap tw=80
augroup end

" status line
function! GitStatus()
	let s = fugitive#head()

	if empty(s)
		return s
	else
		return '  ' . s . ' |'
	endif
endfunction

set laststatus=2
set statusline =%{GitStatus()}
set statusline+=\ %F
set statusline+=%=
set statusline+=%{''.(&fenc!=''?&fenc:&enc).''}
set statusline+=\ \|
set statusline+=\ %{&ff}
set statusline+=\ \|
set statusline+=\ %04v:%04l\ \|\ %04L
set statusline+=%{'\ '}

" word and code completion
set completeopt=menu,menuone
set pumheight=10

function! TabOrComplete()
	if col('.') > 1 && strpart(getline('.'), col('.')-2, 3) =~ '^\w'
		return "\<C-N>"
	else
		return "\<Tab>"
	endif
endfunction
inoremap <Tab> <C-R>=TabOrComplete()<CR>
inoremap <C-@> <C-X><C-U>

" file navigation
let src = substitute(substitute(expand('%:p:h'), '\/src.*$', '', '') . '/src', ' ', '\\ ', 'g')
exec 'set path+=' . src
exec 'set path+=/usr/include/SDL2'
exec 'set path+=/usr/include'

let src = substitute(substitute(expand('%:p:h'), '\/data.*$', '', '') . '/data', ' ', '\\ ', 'g')
exec 'set path+=' . src

let wildignore=[
	\'.svn',
	\'.git',
	\'.hg',
	\'bin',
	\'build',
	\'tmp',
	\'vendor',
	\'src_data',
	\'data/gfx',
	\'data/sfx',
	\'data/def',
	\'data/assets',
	\'data/textures',
	\'data/sprites',
	\'data/audio',
	\'data/sounds',
	\'data/music',
	\'data/maps',
	\'data/levels',
	\'data/worlds',
	\'data/scenes',
	\'data/fonts',
	\'resources',
	\'src/vendor',
	\'zig-cache',
	\'docs'
\]
exec 'set wildignore+=' . join(wildignore, '/*,')
set wildmenu

let g:fastopen_filter_cmd = 'grep -Ev ' . "'" . join(wildignore, '/|') . "/'"
nnoremap <C-l> :call fastopen#show('argedit')<CR>

function! NextFile()
	if bufname('%') == ''
		return
	endif

	silent! exec 'try | n | catch | try | rew | catch | | endtry | endtry'
endfunction

function! PrevFile()
	if bufname('%') == ''
		return
	endif

	silent! exec 'try | prev | catch | try | la | catch | | endtry | endtry'
endfunction

function! CloseFile()
	if g:asynctotem_copen == 1
		call asynctotem#cclose()
		return
	endif

	if &modified && confirm('File modified. Are you sure?', "&Yes\n&No") != 1
		return
	endif

	try
		silent argdel %
		if len(argv()) == 0
			silent q!
		else
			call PrevFile()
		endif
	catch
		if winnr('$') > 1
			silent q!
		else
			if bufname('%') == ''
				silent q!
			else
				silent bd!
			endif
		endif
	endtry
endfunction

noremap <Leader>] :call NextFile()<CR>
noremap <Leader>[ :call PrevFile()<CR>
noremap <Leader>q :call CloseFile()<CR>

" rubocop
let g:vimrubocop_keymap = 0
nnoremap <Leader>c :RuboCop<CR>

" building and project managament
set errorformat^=%-GIn\ file\ included\ %.%#
set errorformat^=%*[^:]:\ %f:%l:%*[^:]:%m "

let g:asynctotem_cclose_delay = 0
let g:asynctotem_jump_delay = 0
let g:asynctotem_copen_height = 6
let g:asynctotem_cclose_on_kill = 1
let g:asynctotem_cclose_on_no_errors = 1

let s:DOTMAKE_FILENAME = '.dotmake'

function! AsyncMakeFindDotMakeDir()
	if exists('g:async_project_dir')
		return g:async_project_dir
	endif

	let makedir = ''

	if exists('b:git_dir') && !empty(b:git_dir)
		let gitmakedir = substitute(b:git_dir, '/\.git$', '', '')
		if gitmakedir != getcwd()
			let makedir = gitmakedir . ';'
		endif
	endif

	let makedir = makedir . '.;'

	let file = findfile(s:DOTMAKE_FILENAME, makedir)
	if empty(file)
		let g:async_project_dir = '-'
		return g:async_project_dir
	endif

	let makedir = fnamemodify(file, ':p:h')
	if empty(makedir) || makedir == '.' || makedir == getcwd()
		let makedir = ''
	endif

	let g:async_project_dir = makedir
	return g:async_project_dir
endfunction

function! AsyncMakeFindDotMake()
	if exists('g:async_project')
		return g:async_project
	endif

	let makedir = AsyncMakeFindDotMakeDir()
	if makedir == '-'
		let g:async_project = makedir
		return g:async_project
	endif

	if !empty(makedir)
		let makedir = '-C ' . makedir . ' '
	endif

	let g:async_project = makedir . '-f ' . s:DOTMAKE_FILENAME
	return g:async_project
endfunction

function! AsyncMake(action)
	let project = AsyncMakeFindDotMake()

	if project == '-'
		echohl ErrorMsg
		echon 'No ' . $DOTMAKE_FILENAME . ' found!'
		echohl None
		return
	endif

	call asynctotem#run('dot-make', project, a:action)
endfunction

function! Asyncopen()
	call asynctotem#copen()
	cbottom
endfunction

noremap <Leader>e :call AsyncMake('build')<CR>
noremap <Leader>r :call AsyncMake('execute')<CR>
noremap <Leader>k :call AsyncMake('clean')<CR>
noremap <Leader>g :call AsyncMake('generate')<CR>
noremap <Leader>f :call Asyncopen()<CR>
noremap <Leader>s :call asynctotem#run('git --no-pager grep -n -I --untracked', expand('<cword>'))<CR>

command! -nargs=+ -complete=shellcmd Arun call asynctotem#run(<q-args>)
command! -nargs=+ -complete=shellcmd Agrep call asynctotem#run('git --no-pager grep -n -I --untracked', <q-args>)

" file templates - based on Damian Conway's plugin
let s:FILE_TEMPLATE_DIR = expand('~/.vim/templates')
let s:FILE_TEMPLATE_PREFIX = 'template'

function! AddTemplatesFromDir(templates, templatedir, templateprefix, filename, extension) abort
	if a:templatedir == '-'
		return
	endif

	let prefix = a:templateprefix
	if !empty(a:templatedir)
		let prefix = a:templatedir . '/' . prefix
	endif

	if !empty(a:filename) && a:filename[0] == '.' && empty(a:extension)
		call add(a:templates, prefix . a:filename)
	elseif a:filename == 'README'
		call add(a:templates, prefix . '.readme')
	elseif a:filename == 'LICENSE'
		call add(a:templates, prefix . '.license')
	else
		call add(a:templates, prefix . '.' . a:filename . '.' . a:extension)
		call add(a:templates, prefix . '.' . a:extension)
	endif
endfunction

function! FindAndFillTemplate(file) abort
	let filepath = fnamemodify(a:file, ':h')
	let filepath = substitute(filepath, '%^data\/\|^data$\|^src\/\|^src$%', '', '')
	let filename = fnamemodify(a:file, ':t:r')
	let extension = fnamemodify(a:file, ':e')

	if empty(filepath) || filepath == '.'
		let packagepath = ''
		let importpath = ''
		let includepath = ''
	else
		let packagepath = substitute(filepath, '/', '.', 'g')
		let importpath = packagepath . '.'
		if importpath == '.'
			let importpath = ''
		endif
		let includepath = filepath . '/'
	end

	let variables = {
	\ 'FILENAME'     : filename,
	\ 'EXTENSION'    : extension,
	\ 'FILENAME_PRE' : toupper(filename),
	\ 'EXTENSION_PRE': toupper(extension),
	\ 'FILEPATH'     : filepath,
	\ 'PACKAGEPATH'  : packagepath,
	\ 'IMPORTPATH'   : importpath,
	\ 'INCLUDEPATH'  : includepath,
	\ 'YEAR'         : strftime('%Y')
	\}

	let templates = []

	call AddTemplatesFromDir(
		\ templates,
		\ AsyncMakeFindDotMakeDir(),
		\ '.' .. s:FILE_TEMPLATE_PREFIX,
		\ filename,
		\ extension
	\)
	call AddTemplatesFromDir(templates, s:FILE_TEMPLATE_DIR, s:FILE_TEMPLATE_PREFIX, filename, extension)

	for filename in templates
		if !filereadable(filename)
			continue
		end

		let template = join(readfile(filename), "\n")
		let template = substitute(template, '%\([A-Z_ ]\+\)%', { m -> get(variables, m[1], m[0]) }, 'g')

		call append(0, split(template, "\n"))
		break
	endfor
endfunction

augroup FileTemplates
    au!
    au BufNewFile * :call FindAndFillTemplate(expand('<afile>'))
augroup END

" auto make parent directory - based on Damian Conway's plugin
function! AutoMakeParentDirectory() abort
	let dir = expand('%:h')

	if isdirectory(dir)
		return
	endif

	if confirm("Parent directory '" . dir . "' doesn't exist.", "&Create it\nor &No?") != 1
		return
	endif

	try
		call mkdir(dir, 'p')
	catch
		" noop
	endtry
endfunction
command! Mkdirp call AutoMakeParentDirectory()

augroup AutoMakeParentDirectory
    au!
    au BufNewFile * :call AutoMakeParentDirectory()
augroup end

" wiki
command! Xwiki e ~/.wiki/README.md

function! WikiJump()
	normal! ^

	let n = search('\.md)$', 'c', getline('.'))
	if n == 0
		return
	endif

	try
		normal! gf
	catch
		exec ':e %:h/<cfile>'
	endtry
endfunction

function! SetupWiki()
	silent! exec 'nnoremap <buffer> <Tab> :call WikiJump()<CR>'
	silent! exec 'nnoremap <buffer> q :call CloseFile()<CR>'
endfunction

augroup Wiki
	au!
	au BufNewFile,BufRead ~/.wiki/*.md :call SetupWiki()
augroup end

function! SetupGitGud()
	silent! exec 'nnoremap <buffer> q :call CloseFile()<CR>'
endfunction

augroup GitGud
	au!
	au BufRead */.git/* :call SetupGitGud()
	au BufRead /tmp/* :call SetupGitGud()
augroup end

" task/todo
nnoremap <Leader>- :call gustav#add()<CR>
nnoremap <Leader>= :call gustav#toggle()<CR>

" clang complete on codespaces
if $USER == 'codespace'
	let g:clang_library_path = '/usr/lib/llvm-3.8/lib/libclang.so.1'
endif

" clang format
function! ClangFormat()
	let l:lines = 'all'
	pyf ~/.vim/bin/clang-format.py
endfunction

function! SetupClangFormat()
	silent! exec 'nnoremap <buffer> <Leader>o :call ClangFormat()<CR>'
endfunction

augroup ClangFormatGroup
	au!
	au BufRead,BufNewFile *.c,*.cc,*.cpp,*.cxx,*.inl,*.h :call SetupClangFormat()
augroup end

" setup various file types
augroup SetupFileTypes
	au!
	au BufRead,BufNewFile *.glsl,*.shader,*.shd set filetype=glsl
	au BufRead,BufNewFile *.CPP,*.H set filetype=cpp
	au BufRead,BufNewFile *.ASM set filetype=asm
	au BufRead,BufNewFile *.mm,*.m set filetype=objc
	au BufRead,BufNewFile *.me,*.symlink,*.bsh,*.localrc set filetype=sh
	au BufRead,BufNewFile *.as set filetype=actionscript
	au BufRead,BufNewFile Gemfile set syntax=off tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile Dockerfile,Jenkinsfile set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile Rakefile,Gemfile set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.ru set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.rb set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.cr set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.conf set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
	au BufRead,BufNewFile .irbrc set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.erb set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.haml,*.hamlc set filetype=haml tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.sass set filetype=sass tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.scss set filetype=sass tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.yml,*.yaml set filetype=yaml tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile Doxterfile set filetype=yaml tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.rake,*.gemspec,*.js,*.jsx set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.feature,*.xml set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.install,*.inc set filetype=php tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab noeol
	au BufRead,BufNewFile *.php set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab noeol
	au BufRead,BufNewFile *.rst set tabstop=3 shiftwidth=3 softtabstop=3 expandtab
	au BufRead,BufNewFile Cakefile set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.coffee,*.feature,*.jsx set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.ninja set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
	au BufRead,BufNewFile *.hx set filetype=haxe tabstop=2 shiftwidth=2 softtabstop=2 expandtab
	au BufRead,BufNewFile *cms-plugins*/*joomla*/*.php set filetype=php
		\ tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
augroup end
