" Custom make wrapper which can search for a valid Makefile.
set makeprg=make.sh
" Custom grep wrapper
set grepprg=grep.sh
" Custom error formatting
set errorformat^=%-GIn\ file\ included\ %.%#

" Bind Ctrl+B to make
map <c-b> <ESC>:make build<CR>
" Bind Ctrl+R to execute
map <c-r> <ESC>:make execute<CR>
" Bind Ctrl+Q to clean
map <c-k> <ESC>:make clean<CR>
" Bind Ctrl+G to generate
map <c-g> <ESC>:make generate<CR>
" Toggle Spell checking
map <F4> :set spell! spelllang=en_us<CR>
" Toggle Line Numbers
map <F2> :set nonumber!<CR>

" Copy Paste with Ctrl+C and Ctrl+V
vmap <c-c> :w! ~/.vim/swap/.buffer<CR>
nmap <c-p> :r ~/.vim/swap/.buffer<CR>

" Highlight Last Searched Term
noremap <space> :set hlsearch!<CR>

" Shortcut for Redo
noremap r :redo<CR>

set nospell
set encoding=utf8
set fileencoding=utf8
set selectmode=key
set nowrap
set complete-=i
set fileformats=unix,mac,dos
set nocp
set keymodel=startsel
set laststatus=2
set novisualbell
set number
set report=0
set nolazyredraw
set ttyfast
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<,eol:$
set autoindent
set cindent
set smartindent
set smartcase
set noexpandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set cursorline
set smarttab
set showmatch
set nohlsearch
set incsearch
set nocompatible
set backspace=indent,eol,start
set diffopt+=iwhite
set hidden
set nostartofline
set shortmess=atsI
set noshowcmd
set ignorecase
set mouse-=a
"set columns=120
"set colorcolumn=100
"set tw=99
set ruler
set undolevels=500
set history=1000
set nofsync
set clipboard+=unnamed
set cinoptions+=g0
set foldmethod=marker

let python_highlight_all=1

syntax on
syntax sync fromstart
filetype on
filetype plugin on
filetype plugin indent on
filetype indent on

set t_AB=^[[48;5;%dm
set t_AF=^[[38;5;%dm
set t_Co=256
set term=gnome-256color
"set term=xterm-256color

if $TMUX =~ 'tmux'
	set term=screen-256color

	nmap  <Home>
	imap  <Home>
	vmap  <Home>
	nmap  <End>
	imap  <End>
	vmap  <End>
endif

let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : ''  }

if has("gui_running")
	set guifont=IBM\ Plex\ Mono\ SemiBold\ 19
	set guicursor+=a:blinkon0
	set guioptions=i
endif

set completeopt=menu,menuone
set pumheight=10

let g:lightline =
	  \	{
	  \   'active': {
	  \     'left': [['mode', 'paste'], ['gitbranch'], ['asynctotem', 'readonly', 'filename', 'modified']]
	  \   },
	  \   'component_function': {
	  \		'gitbranch': 'fugitive#head',
	  \		'asynctotem': 'asynctotem#status'
	  \	  },
	  \   'mode_map': {
	  \     'n': 'N', 'i': 'I', 'R': 'R', 'v': 'V', 'V': 'VL', "\<C-v>": 'VB',
	  \     'c': 'C', 's': 'S', 'S': 'SL', "\<C-s>": 'SB', 't': 'T'
	  \   }
	  \ }

let g:html_font='IBM Plex Mono Medium'

"set background=dark
"set background=light
colorscheme gummybears

hi Normal ctermbg=none
hi Normal ctermfg=251
hi NonText ctermbg=none
hi Search cterm=none ctermfg=1 ctermbg=172
hi Todo ctermbg=none ctermfg=107
hi QuickFixLine cterm=none ctermbg=none
hi ColorColumn ctermbg=107 ctermfg=1

call matchadd('ColorColumn', '\%120v', 120)

" Highlight any trailing whitespaces
hi WEOL ctermbg=red guibg=red
let s:weol = 0

function! ToggleWhitespaceHighlight()
	let s:weol = !s:weol

	if s:weol
		match WEOL /\s\+$/
	else
		match none
	endif
endfunction
map <F3> :call ToggleWhitespaceHighlight()<CR>

" Word Completion
function! Tab_Or_Complete()
	if col('.') > 1 && strpart(getline('.'), col('.')-2, 3) =~ '^\w'
		return "\<C-N>"
	else
		return "\<Tab>"
	endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
inoremap <C-@> <C-X><C-U>

" File Types
au! BufRead,BufNewFile *.json set filetype=json
au! BufRead,BufNewFile *.as set filetype=actionscript
au! BufRead,BufNewFile Rakefile,Gemfile set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.ru set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.rb set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.cr set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.conf set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
au! BufRead,BufNewFile .irbrc set filetype=ruby tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.erb set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.haml,*.hamlc set filetype=haml tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.sass set filetype=sass tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.scss set filetype=sass tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.yml,*.yaml,Doxterfile set filetype=yaml tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.rake,*.gemspec,*.js,*.jsx,*.feature,*.xml set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.install,*.inc,*.php set filetype=php tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab noeol
au! BufRead,BufNewFile *.rst set tabstop=3 shiftwidth=3 softtabstop=3 expandtab
au! BufRead,BufNewFile *.me,*.symlink,*.bsh,*.localrc set filetype=sh
au! BufRead,BufNewFile *.py set filetype=python
au! BufRead,BufNewFile Cakefile set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.coffee,*.feature,*.jsx set tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *.ninja,*.lua set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab noeol
au! BufRead,BufNewFile *.hx set filetype=haxe tabstop=2 shiftwidth=2 softtabstop=2 expandtab
au! BufRead,BufNewFile *.glsl,*.shader,*.shd set filetype=glsl
au! BufRead,BufNewFile *.CPP set filetype=cpp
au! BufRead,BufNewFile *.ASM set filetype=asm
au! BufRead,BufNewFile *.mm,*.m set filetype=objc
au! BufRead,BufNewFile *.md,*.markdown,*.mkd call DistractionFreeWriting()
au! BufRead,BufNewFile Gemfile set syntax=off tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile *cms-plugins*/*joomla*/*.php set filetype=php tabstop=2 shiftwidth=2 softtabstop=2 expandtab noeol
au! BufRead,BufNewFile * set formatoptions=tcq

function! DistractionFreeWriting()
	set tabstop=2 shiftwidth=2 softtabstop=2 expandtab
	set laststatus=0
	set noruler
	set linebreak
	set nonumber
"	set foldcolumn=10
""	set columns=80
"	set colorcolumn=80
""	set tw=79
	set noshowmode
	set wrap

	hi FoldColumn ctermbg=none
	hi clear SpellBad
	hi SpellBad term=standout ctermfg=1 term=none cterm=none
	hi clear SpellCap
	hi SpellCap term=standout ctermfg=2 term=none cterm=none
	hi clear SpellLocal
	hi SpellLocal term=standout ctermfg=3 term=none cterm=none
	hi clear SpellRare
	hi SpellRare term=standout ctermfg=4 term=none cterm=none

	" call matchadd('ColorColumn', '\%80v', 80)
endfunction

" Swap Directory
set directory=~/.vim/swap

" Restore / Jump to last position
au! BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" Strip trailing spaces on write
au! BufWritePre * :%s/\s\+$//e

nnoremap ; :

let g:fastopen_filter_cmd = "exclude.sh"
map <c-l> :call fastopen#show('argedit')<cr>

" RuboCop
let g:vimrubocop_keymap = 0
nmap <Leader>c :RuboCop<CR>

let g:delimitMate_expand_cr=1

map <Leader>p :!pandoc -f markdown+tex_math_single_backslash -t beamer --pdf-engine=xelatex -o /tmp/vim_pandoc_tmp.pdf '%' && mupdf /tmp/vim_pandoc_tmp.pdf && rm /tmp/vim_pandoc_tmp.pdf <CR>

" Append the src directory to the path
let src = substitute(substitute(expand('%:p:h'), '\/src.*$', '', '') . '/src', ' ', '\\ ', 'g')
execute 'set path+=' . src
execute 'set path+=/usr/include/SDL2'
execute 'set path+=/usr/include'

" Append the data directory to the path
let src = substitute(substitute(expand('%:p:h'), '\/data.*$', '', '') . '/data', ' ', '\\ ', 'g')
execute 'set path+=' . src

" Exclude commonly undesirable directories from the wild menu
set wildmenu
set wildignore+=.svn/*,.git/*,.hg/*,bin/*,build/*,src_data/*,data/assets/*,resources/*,src/vendor/*

nmap <Leader>t :. !template.sh '%:t' '%:p:h'<CR>

set cryptmethod=blowfish2

let coffee_no_reserved_words_error = 1

function! NextFile()
	execute 'try | n | catch | try | rew | catch | | endtry | endtry'
endfunction

function! PrevFile()
	execute 'try | prev | catch | try | la | catch | | endtry | endtry'
endfunction

function! CloseFile()
	execute 'try | argdel % | catch | endtry'
	execute 'try | n | catch | try | rew | catch | q | endtry | endtry'
endfunction

noremap <Leader>] :call NextFile()<CR>
noremap <Leader>[ :call PrevFile()<CR>

noremap <Leader>q :call CloseFile()<CR>

noremap <Leader>w <C-w>w

au BufReadPost quickfix silent exec 'nnoremap q :cclose<CR>'

let g:asynctotem_copen = 0
let g:asynctotem_cclose_delay=0
let g:asynctotem_cclose_on_kill=1
let g:asynctotem_cclose_on_no_errors=1

function! Acopen()
	if g:asynctotem_copen == 0
		let g:asynctotem_cclose_on_kill=0
		let g:asynctotem_cclose_on_no_errors=0
		let g:asynctotem_copen = 1
		copen
	else
		let g:asynctotem_cclose_on_kill=1
		let g:asynctotem_cclose_on_no_errors=1
		let g:asynctotem_copen = 0
		cclose
	endif
endfunction

noremap <Leader>e :call asynctotem#run(&makeprg, 'build')<CR>
noremap <Leader>r :call asynctotem#run(&makeprg, 'execute')<CR>
noremap <Leader>k :call asynctotem#run(&makeprg, 'clean')<CR>
noremap <Leader>g :call asynctotem#run(&makeprg, 'generate')<CR>
noremap <Leader>f :call Acopen()<CR>

noremap q <nop>

command! -nargs=+ -complete=shellcmd Arun call asynctotem#run(<q-args>)
command! -nargs=+ -complete=shellcmd Agrep call asynctotem#run(&grepprg, <q-args>)
